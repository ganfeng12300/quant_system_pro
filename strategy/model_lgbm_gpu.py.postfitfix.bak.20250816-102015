# -*- coding: utf-8 -*-
"""LightGBM GPU 策略（分类）——device_type=gpu（若为 GPU 版 LightGBM）。"""
import numpy as np, pandas as pd
from utils.gpu_accel import lgbm_params
try:
    import lightgbm as lgb
except Exception:
    lgb=None

def _rsi(s, period=14):
    d = s.diff()
    up = d.clip(lower=0).ewm(alpha=1/period, adjust=False).mean()
    dn = (-d).clip(lower=0).ewm(alpha=1/period, adjust=False).mean()
    rs = up/(dn+1e-12)
    return 100 - 100/(1+rs)

def _features(df: pd.DataFrame):
    c = pd.to_numeric(df.get('close'), errors='coerce').astype(float)
    v = pd.to_numeric(df.get('volume', 0), errors='coerce').astype(float)
    ret1  = c.pct_change()
    ret10 = c.pct_change(10)
    ema20 = c.ewm(span=20, min_periods=20).mean()
    ema60 = c.ewm(span=60, min_periods=60).mean()
    gap   = (ema20-ema60)/ema60
    rsi14 = _rsi(c,14)
    volr  = v.pct_change().rolling(10,min_periods=10).mean()
    X = pd.DataFrame({'ret1':ret1,'ret10':ret10,'gap':gap,'rsi14':rsi14,'volr':volr}, index=df.index).replace([np.inf,-np.inf],np.nan).dropna()
    y = (c.pct_change().shift(-1).reindex(X.index)>0).astype(int)
    return X,y

def strat_lgbm(df: 'pd.DataFrame', lookback:int=3000, train_ratio:float=0.7,
               num_leaves:int=64, n_estimators:int=800, learning_rate:float=0.05,
               subsample:float=0.8, colsample_bytree:float=0.8, threshold:float=0.5):
    if lgb is None:
        return pd.Series(0, index=df.index, dtype=int)
    X,y = _features(df)
    if len(X) < max(300, int(lookback*0.6)):
        return pd.Series(0, index=df.index, dtype=int)
    X = X.iloc[-lookback:]; y = y.loc[X.index]
    ntr = max(50, int(len(X)*train_ratio))
    Xtr, Xte = X.iloc[:ntr], X.iloc[ntr:]
    ytr, yte = y.iloc[:ntr], y.iloc[ntr:]
    if len(Xte)==0:
        return pd.Series(0, index=df.index, dtype=int)
    params = lgbm_params({
        'num_leaves'     : int(num_leaves),
        'n_estimators'   : int(n_estimators),
        'learning_rate'  : float(learning_rate),
        'subsample'      : float(subsample),
        'colsample_bytree': float(colsample_bytree),
        'random_state'   : 42,
        'n_jobs'         : -1
    })
    model = lgb.LGBMClassifier(**params)
    __qs_lgbm_fit(model, Xtr, ytr, Xte, yte)], eval_metric="binary_logloss", early_stopping_rounds=50, verbose=False)
    proba = pd.Series(model.predict_proba(__qs_align_lgbm(model, Xte))[:,1], index=Xte.index)
    sig   = (proba > float(threshold)).astype(int)*2-1
    pos   = pd.Series(0, index=df.index, dtype=int)
    pos.loc[sig.index] = sig.values
    return pos.shift(1).fillna(0).astype(int)

# === qs:auto: LightGBM 预测对齐 & 降噪（请勿手改） ===
import pandas as _pd
def __qs_align_lgbm(model, X):
    cols = None
    try:
        cols = getattr(model, "feature_name_", None)
        if cols is None and hasattr(model, "booster_"):
            cols = model.booster_.feature_name()
    except Exception:
        cols = None
    if isinstance(X, _pd.DataFrame):
        return X if cols is None else X.reindex(columns=list(cols), fill_value=0)
    return _pd.DataFrame(X, columns=list(cols)) if cols is not None else _pd.DataFrame(X)

# === qs:auto:lgbm helpers (DO NOT EDIT) ===
import warnings as __qs_warnings
__qs_warnings.filterwarnings("ignore", message="X does not have valid feature names", category=UserWarning)
try:
    import lightgbm as __qs_lgb
    try:
        __qs_lgb.set_config(verbosity=-1)
    except Exception:
        pass
except Exception:
    __qs_lgb = None

import pandas as __qs_pd
def __qs_align_lgbm(model, X):
    cols = None
    try:
        cols = getattr(model, "feature_name_", None)
        if cols is None and hasattr(model, "booster_"):
            cols = model.booster_.feature_name()
    except Exception:
        cols = None
    if isinstance(X, __qs_pd.DataFrame):
        return X if cols is None else X.reindex(columns=list(cols), fill_value=0)
    return __qs_pd.DataFrame(X, columns=list(cols)) if cols is not None else __qs_pd.DataFrame(X)

def __qs_lgbm_fit(model, Xtr, ytr, Xte, yte):
    try:
        model.set_params(verbosity=-1)
    except Exception:
        pass
    try:
        model.set_params(verbose=-1)
    except Exception:
        pass
    # sklearn API：early_stopping_rounds + eval_set + verbose=False
    return __qs_lgbm_fit(model, Xtr, ytr, Xte, yte)],
        eval_metric="binary_logloss",
        early_stopping_rounds=50,
        verbose=False
    )
